// Generated by gencpp from file bno055_usb_stick_msgs/CalibrationStatus.msg
// DO NOT EDIT!


#ifndef BNO055_USB_STICK_MSGS_MESSAGE_CALIBRATIONSTATUS_H
#define BNO055_USB_STICK_MSGS_MESSAGE_CALIBRATIONSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bno055_usb_stick_msgs
{
template <class ContainerAllocator>
struct CalibrationStatus_
{
  typedef CalibrationStatus_<ContainerAllocator> Type;

  CalibrationStatus_()
    : system(0)
    , gyroscope(0)
    , accelerometer(0)
    , magnetometer(0)  {
    }
  CalibrationStatus_(const ContainerAllocator& _alloc)
    : system(0)
    , gyroscope(0)
    , accelerometer(0)
    , magnetometer(0)  {
  (void)_alloc;
    }



   typedef uint16_t _system_type;
  _system_type system;

   typedef uint16_t _gyroscope_type;
  _gyroscope_type gyroscope;

   typedef uint16_t _accelerometer_type;
  _accelerometer_type accelerometer;

   typedef uint16_t _magnetometer_type;
  _magnetometer_type magnetometer;





  typedef boost::shared_ptr< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> const> ConstPtr;

}; // struct CalibrationStatus_

typedef ::bno055_usb_stick_msgs::CalibrationStatus_<std::allocator<void> > CalibrationStatus;

typedef boost::shared_ptr< ::bno055_usb_stick_msgs::CalibrationStatus > CalibrationStatusPtr;
typedef boost::shared_ptr< ::bno055_usb_stick_msgs::CalibrationStatus const> CalibrationStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator1> & lhs, const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator2> & rhs)
{
  return lhs.system == rhs.system &&
    lhs.gyroscope == rhs.gyroscope &&
    lhs.accelerometer == rhs.accelerometer &&
    lhs.magnetometer == rhs.magnetometer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator1> & lhs, const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bno055_usb_stick_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dcc2b46dfebad9476df3c38a333f4515";
  }

  static const char* value(const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdcc2b46dfebad947ULL;
  static const uint64_t static_value2 = 0x6df3c38a333f4515ULL;
};

template<class ContainerAllocator>
struct DataType< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bno055_usb_stick_msgs/CalibrationStatus";
  }

  static const char* value(const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 3 indicates fully calibrated; 0 indicates not calibrated\n"
"\n"
"uint16 system\n"
"uint16 gyroscope\n"
"uint16 accelerometer\n"
"uint16 magnetometer\n"
;
  }

  static const char* value(const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.system);
      stream.next(m.gyroscope);
      stream.next(m.accelerometer);
      stream.next(m.magnetometer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalibrationStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bno055_usb_stick_msgs::CalibrationStatus_<ContainerAllocator>& v)
  {
    s << indent << "system: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.system);
    s << indent << "gyroscope: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gyroscope);
    s << indent << "accelerometer: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.accelerometer);
    s << indent << "magnetometer: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.magnetometer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BNO055_USB_STICK_MSGS_MESSAGE_CALIBRATIONSTATUS_H
